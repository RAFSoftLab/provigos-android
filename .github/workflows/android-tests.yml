name: Android Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/gradle-wrapper.properties', '**/build.gradle*', '**/gradle.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Create secrets.properties
        run: |
          echo "google_client_id=${{ secrets.GOOGLE_CLIENT_ID }}" > secrets.properties
          echo "github_client_id=${{ secrets.GH_CLIENT_ID }}" >> secrets.properties
          echo "github_client_secret=${{ secrets.GH_CLIENT_SECRET }}" >> secrets.properties
          echo "spotify_client_id=${{ secrets.SPOTIFY_CLIENT_ID }}" >> secrets.properties
          echo "spotify_client_secret=${{ secrets.SPOTIFY_CLIENT_SECRET }}" >> secrets.properties

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest --continue

      - name: Generate JaCoCo Report for Unit Tests
        run: ./gradlew jacocoTestReport

      - name: Upload Unit Test Coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: app/build/reports/jacoco/



  instrumented-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api-level: [26, 28, 34]
      fail-fast: false
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/gradle-wrapper.properties', '**/build.gradle*', '**/gradle.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Create secrets.properties
        run: |
          echo "google_client_id=${{ secrets.GOOGLE_CLIENT_ID }}" > secrets.properties
          echo "github_client_id=${{ secrets.GH_CLIENT_ID }}" >> secrets.properties
          echo "github_client_secret=${{ secrets.GH_CLIENT_SECRET }}" >> secrets.properties
          echo "spotify_client_id=${{ secrets.SPOTIFY_CLIENT_ID }}" >> secrets.properties
          echo "spotify_client_secret=${{ secrets.SPOTIFY_CLIENT_SECRET }}" >> secrets.properties      

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: AVD Cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
            ~/.android/cache
          key: avd-${{ matrix.api-level }}-${{ hashFiles('**/gradle-wrapper.properties', '**/gradle/libs.versions.toml', '**/gradle.properties') }}

      - name: Create AVD and Generate Snapshot
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: ReactiveCircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: x86_64
          force-avd-creation: true
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
          disable-animations: true
          script: |
            adb wait-for-device shell getprop sys.boot_completed

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run Instrumented Tests
        uses: ReactiveCircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
          disable-animations: true
          script: |
            ./gradlew connectedCheck --stacktrace
            adb emu kill

      - name: Generate Instrumented Test Coverage Report
        run: ./gradlew jacocoAndroidTestReport

      - name: Upload Instrumented Test Coverage (API ${{ matrix.api-level }})
        uses: actions/upload-artifact@v4
        with:
          name: instrumented-test-coverage-api-${{ matrix.api-level }}
          path: app/build/reports/coverage/debug/